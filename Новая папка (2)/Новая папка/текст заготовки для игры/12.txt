1. как в godot 4 engine создавать массивы, и как их перебирать в скрипте на gdscript? 
2. можешь мне помочь придумать как двигаться по массиву между ячейками, через ячейки массива, но с ограничением на одну ячейку в двойном массиве, как перемешаться между этими массивами при помощи кубических мини массивов, закрепленными за ячейками двумерного массива, 
3. в этой игре мне надо сделать  будто ты двигаешься по своему инвентарю, с сохранением позиции массива, инветарь я сделаю сам, но логику как будто там чтото может появиться из вне мне надо помочь придумать, как обернуть индекс массива в квадрат ячеек вокргуг массива в квадрат чтобы из этого внешнего квадрата брать информацию. которая там будет помешена. тоесть пример двумерного массиваа три на три , обернуть его в квадрат по три ячейки с каждой стороны, не соединяя углы между ними. как бы это записать в коде, чтобы логически было просто с этим работать. 


а движения вверх вправо, вверх влево, вниз вправо, вниз влево? можешь добавить по моему способы вычитания из цифры 4 и 4 - 4 вверх вправо, 4 - 3 вверх, 4 - 2 вверх вправо, 4 - 1 влево, 4 - 0, оставаться на месте, 4 + 1, вправо, 4 + 2  вниз влево, 4 + 3 вниз, 4+ 4 вниз вправо. а ещё попонятнее сделать большой массив без непонятных чисел, а только строго определенных. тоесть не использовать x, y, z и буквенные обозначения, чтобы мне можно было прогнать код в своей программе.

index = row * M + column

extends Node

var rows = 10
var columns = 10
var massive = []

func _ready():
    # Заполнение массива значениями от 0 до 99
    for i in range(rows):
        var row = []
        for j in range(columns):
            row.append(i * columns + j) # Заполнение значениями
        massive.append(row)

    # Вывод массива в консоль
    for row in massive:
        print(row)


# Движения
var movements = {
    "up_right": -4,
    "up": -3,
    "up_left": -2,
    "left": -1,
    "stay": 0,
    "right": 1,
    "down_left": 2,
    "down": 3,
    "down_right": 4
}

# Пример использования
move(movements["up_right"]) # Движение вверх вправо



код, который вроде долен работать, ток над переписать методы в процесс, там поебень всего четрые, надо больше, и вызывать их через кнопки
extends Node

# Максимальные размеры
const MAX_ROW = 10
const MAX_COLUMN = 10

# Псевдо-массив для хранения индексов
var pseudo_array = []

# Текущие координаты игрока
var current_row = 0
var current_column = 0

func _ready():
    # Инициализация псевдо-массива
    for i in range(MAX_ROW * MAX_COLUMN):
        pseudo_array.append(i)




func move_player(new_row: int, new_column: int):
    # Проверка границ
    if new_row < 0 or new_row >= MAX_ROW or new_column < 0 or new_column >= MAX_COLUMN:
        print("Недопустимое движение!")
        return

    # Сохранение текущих координат
    var previous_index = get_index(current_row, current_column)
    
    # Обновление координат игрока
    current_row = new_row
    current_column = new_column
    
    # Получение нового индекса
    var new_index = get_index(current_row, current_column)
    
    # Вывод информации о перемещении
    print("Игрок переместился с индекса ", previous_index, " на индекс ", new_index)






func get_index(row: int, column: int) -> int:
    return row * MAX_COLUMN + column

# Пример использования

func _on_input_event(event):
    if event.is_action_pressed("ui_right"):
        move_player(Vector2(0, 1))  # Движение вправо

    elif event.is_action_pressed("ui_left"):
        move_player(Vector2(0, -1))  # Движение влево

    elif event.is_action_pressed("ui_down"):
        move_player(Vector2(1, 0))  # Движение вниз

    elif event.is_action_pressed("ui_up"):
        move_player(Vector2(-1, 0))  # Движение вверх

