что сейчас не хватает, и за какой процесс игры можно взяться если есть время. вопросы надо выполнять в обратном порядке, но если есть идеи можно будет потом обговорить их.

1. система сохранений прогресса - сохранять надо будет кучу переменных, вообще не разбираюсь в этом вопросе, в каких файлах надо хранить сохранение, можно ли их хранить облачно если это игра онлайн, а некоторые сохранения надо будет разделить на разные категории, что ты хочешь чтобы хранил сам игрок, и что ты хочешь чтобы хранилось на сервере.
так же я бы сразу задумался, о читерах в этом вопросе, чтобы нельзя было из всеобщего сервера, перенести себе сохранения фиг пойми какие, то есть кучу двух сторонних проверок, ну кто сайты разрабатывает шарят... ключ значение, даже шифрование можно подключить. это надо будет сделать но вообще не в первую очередь, скорее всего когда уже будет цельная игра, и будет идея внедрить игру в браузер, как раз с него можно и начать.

2. система генерации карт - с генерацией карт все не так однозначно, она может  быть построена на совершенно разных подходах, и какой выбрать я не совсем вдупляю, так как во первых до сих пор не понимаю, как должна выглядеть карта в идеале, то есть есть много идей, сделать несколько разных генераций, либо просто пока накидать макеты которые вообще существуют, и выбирать то, что нам нужно. я когда пробовал делать генерацию в прошлой игре, наткнулся на интересную  генерацию лабиринта, но она была просто огромной. гигантские лабиринты это вообще не то что нам надо, это сильно отпугнет. максимум небольшие. но опять же я бы просто остановился на собственной генерации через подход создания новых массивов с новыми индексами и просто перемещал их, а  вот как индексы в массиве будут расположены, это уже надо подумать, ну и от расположения соответственно будет менять логика с какой клетки на какую путешествовать, и если менять идеальную индексацию массивов по формуле, то надо также и менять код в методе move() в уже написанном коде. который учитывает только массивы с расположением индексов по формуле. ну это не слишком сложно сделать, просто расширить уже существующий метод, и для таких переделанных массивов и использовать другой, на основе старого. крч разобраться можно. можно же даже двумерный массив (массив в массиве использовать для этого) а не просто псевдо массив из формулы, наверное это даже лучше будет.

3. система ии, как они будут ходить, и вражеские и союзные. - самое сложное, что как я думаю надо будет делать из всего этого, надо же учитывать все элементы игровой механики, то есть я считаю, что очень сложно заставить бота аи предсказать какой ход должен сделать игрок, чтобы потом попробовать обыграть этого игрока. надо будет учитывать как и ходы компьютера, так и ходы игрока, для перерасчетов, которые желательно будут тоже происходить по таймеру совпадающим с ходом. я просто хз, идей могу накидать, а как это описать в коде вообще нет идей. слишком много надо будет сделать ещё для того, чтобы игра вообще работала, и в ней вообще можно было сделать искусственный интеллект, с которым было бы интересно, но он не должен быть прям сильным-сильным. что очень даже хорошо, сильным можно сделать в заранее запрограммированных уровнях которых будем делать при помощи генерации карт, 

4. встроенный редактор карт, чтоб удобно было создавать лвл. тоже сложная громоздкая штука, но без которой невозможно в принципе запилить готовые лвл, не знаю что тут рассказывать, пока только идея, что он должен быть в 3 д виде, с летающей камерой, знаете как камера смерти в кс 1.6 раньше была, вот типо и все, ну понятно что, это надо будет сделать совместно с системой генерации карт, чтобы можно было прям готовые части рандомно сгенерированные сохранить, поэтому это тоже не первоочередный вопрос, но простенькие тестовые уровни можно будет клипать уже как только сделаем логику игры.  

5. собственно сама логика игры совстоит из перемещение врагов, перемещение объектов, перемещение игрока 

6. создание объектов, создание игрока через сингл тон с учетом, что может быть онлайн и придётся добавить плеера два, тоже через сингл тон, создание врагов, создание 



это был список, что нужно запрограмировать. и сейчас это просто несбыточная мечта того, что нужно в идеале для этой игры. ну там ещё много моментов не связанных с программированием, а скорее с созданием элесентов самой игры.

теперь немного разглагольствования на тему того, что я вообще представляю нужно будет сделать ещё. это пока просто наброски идей, которые возможно отпадут, в начале, но просто можно будет выпустить вторую игру с дополнениями геймплея, ну или как я уже сказал разделить в самой игре режим одиночного прохождения уровней, как сюжетную линию. и режим после сюжетной игры, где у тебя тоже может быть выбор, можно даже сделать так, что генерация уровней будет доступна прям из игры, что я вообще и хочу сделать, чтобы прям в игре ты мог этой камерой смерти полетать и построить себе свой лвл, но тогда встает вопрос об программировании искусственного интеллекта из самой игры, а это уже капец какая сложная тема, и как ее реализовать непонятно. 

есть ещё список, какие модельки нужно сделать в 3д редакторе, этим сам займусь, как время будет. Начиная, от шахматных фигур, заканчивая всякими возможно даже шахматными боссами, потому что сама концепция игры типо на шахматах построена, а вот геймплей будет не совсем такой каким его возможно вы уже представили у себя в головах, ну или можно будет сделать выбор какой гемплей будет, и идти к общей картинке, я просто хочу сделать гемплей в итоге приблеженный к тому что ты будешь водить за собой пачку юнитов по большому полю и расчищать другие пачки врагов, у игрока в зависимости от класса, не только у игрока есть жизни, как игрока так и союзных юнитов можно будет улучшать, ну или сделать так чтобы юниты зависели от улучшения самой шахматной фигуры короля. С прокачкой они будут сами за тобой передвигаться не тратя на это твой собственный ход, можно сделать шкалу хода, которую будет тратить каждое передвижение твоих союзных фигур, шкала предположим имеет максимум в 15 единиц,  
 
напишу нынешние косяки кода, которые надо исправить, точнее переделать, чтобы логика работала. ещё точнее дописать.

move()  (он кстате щяс выглядит както не так как нужно, и учитывает движения только короля. самое сложное с конем, надо новую логику в метод добавлять)

сейчас учитывает логику того, что игрок переходит из одного индекса в другой , на основе формулы псевдо массива. 


код написан на gdscript, просто перекинете его в gpt чтоб он расшифровал этот непонятный код. но суть тут одна, что в коде есть одна функция, у которой есть много вызовов, вверх вниз там, но надо добавить вызовы, точнее как то красиво их разнести по ооп, то есть функция он_инпут_ивент изначально должна быть пустая, а в зависимости от персонажа, точнее от фигуры, нужно будет ее дописать. я не силен в ооп, и мне вот прям сильно нужна помощь именно с разделением методов, чтобы они в принципе могли работать даже если в них добавить новую логику.

extends Node

var M = 10 # Ширина псевдо-массива
var C = 10 # столбец
var max_index = 99  # Максимальный индекс (10 * 10 - 1)
var min_index = 0  # Минимальный индекс

# Текущие координаты игрока
var current_row = 0
var current_column = 0
var current_position_move = Vector2(1, 1)
var index

func move_player(direction: Vector2):
	# Вычисляем новый индекс
	var new_row = current_row + direction.y
	var new_column = current_column + direction.x

	# Проверяем границы
	if new_row >= 0 and new_row < C and new_column >= 0 and new_column < M:
		current_row = new_row
		current_column = new_column
		index = current_row * M + current_column
		print("Игрок перемещен на индекс: ", index)
	else:
		print("Перемещение вне границ!")

func _on_input_event(event: String):
	var ver := event

	var upper = Vector2(0, -1)
	if ver == "up":
		move_player(upper)

	var downer =  Vector2(0, 1)
	if ver == "down":
		move_player(downer)

	var lefter = Vector2(-1, 0)
	if ver == "left":
		move_player(lefter)

	var righter = Vector2(1, 0)
	if ver == "right":
		move_player(righter)

	var up_righter = Vector2(1, -1)
	if ver == "up_right":
		move_player(up_righter)

	var up_lefter = Vector2(-1, -1)
	if ver == "up_left":
		move_player(up_lefter)

	var down_righter = Vector2(1, 1)
	if ver == "down_right":
		move_player(down_righter)

	var down_lefter = Vector2(-1, 1)
	if ver =="down_left":
		move_player(down_lefter)

	var zeroer = Vector2(0, 0)
	if ver =="zero":
		move_player(zeroer)
	



пока я просто могу накидать существующие скрипты и объяснить, что они делают, а потом подумаем, что и как их Проше объединить, например я пока только на словах допер, что этот мув скрипт, вообще нужно разделить, так как до этого у меня другое виденье картинки игры было, и думал что персонаж всегда будет двигаться на одну клеточку, но это тупо. щяс ещё понял что все таки в стандартном классе нужно оставить move_player(zero), чтобы он был у всех классов, наследующих скрипт мув, чтобы преграды в виде каких ни будь стен, правильно обрабатывались, потому, что абсолютно все элементы которые имеют в булевом массиве труе будут обрабатываться раз в одну две три секунды, и все статичные элементы должны будут использовать метод Move_player(zero) вот и первый косяк в наименовании который вылез на поверхность.
я плохо объяснил что вообще хочу в игре, и как игра будет играть сама в себя, если не двигать персонажа. 
просто хочу сделать пропуск хода, но чтобы этот пропуск учитывался в отмотке ходов, да насчет отмотки ходов, нужно придумать грамотный ui интерфейс, на мобилку, чтобы было удобно играть.


	
	
